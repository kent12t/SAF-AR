import*as THREE from"three";import{FBXLoader}from"three/addons/loaders/FBXLoader.js";import{GLTFLoader}from"three/addons/loaders/GLTFLoader.js";import{MindARThree}from"mindar-image-three";const loadingElement=document.querySelector(".loading"),startButton=document.getElementById("startButton"),stopButton=document.getElementById("stopButton");let scene,camera,renderer,mindarThree=null,clock=new THREE.Clock,testMode=!1;function fixMaterial(e){if(e.isMeshPhongMaterial){const t=new THREE.MeshStandardMaterial;return t.map=e.map,t.color.copy(e.color),t.transparent=e.transparent,t.opacity=e.opacity,t.side=THREE.DoubleSide,t.roughness=.6,t.metalness=0,t.map&&(t.map.colorSpace=THREE.SRGBColorSpace,t.map.needsUpdate=!0),e.normalMap&&(t.normalMap=e.normalMap,t.normalScale.copy(e.normalScale)),t}return e.side=THREE.DoubleSide,e.transparent&&(e.opacity=1,e.alphaTest=.01,e.depthWrite=!0),e.map&&(e.map.colorSpace=THREE.SRGBColorSpace,e.map.needsUpdate=!0),e.normalMap&&(e.normalMap.needsUpdate=!0,e.normalScale.set(1,1)),e.needsUpdate=!0,e}function fixGeometry(e){return e.attributes.normal?(e.computeVertexNormals(),e.attributes.normal.needsUpdate=!0):e.computeVertexNormals(),e.attributes.position.needsUpdate=!0,e}window.addEventListener("resize",(()=>{if(renderer){const e=window.innerWidth,t=window.innerHeight;renderer.setSize(e,t),camera&&camera.aspect&&(camera.aspect=e/t,camera.updateProjectionMatrix())}}));const ModelManager={models:{},mixers:{},actions:{},cycleTimer:null,cycleInterval:18e3,async loadModel(e,t={}){const o={...{position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:e.toLowerCase().endsWith(".glb")?1:.01,visible:!0,delay:0},...t};try{try{if(!(await fetch(e,{method:"HEAD"})).ok)throw console.error(`Model file not found: ${e}`),new Error(`Model file not found: ${e}`)}catch(t){throw console.error(`Error checking model file: ${e}`,t),new Error(`Cannot access model file: ${e}`)}let t,a=[];if(e.toLowerCase().endsWith(".fbx")){const o=new FBXLoader;t=await o.loadAsync(e),t.animations&&t.animations.length>0&&(a=t.animations)}else{if(!e.toLowerCase().endsWith(".glb")&&!e.toLowerCase().endsWith(".gltf"))throw new Error(`Unsupported model format: ${e}`);{const o=new GLTFLoader,n=await o.loadAsync(e);t=n.scene,n.animations&&n.animations.length>0&&(a=n.animations)}}if(t.position.set(o.position.x,o.position.y,o.position.z),t.rotation.set(o.rotation.x,o.rotation.y,o.rotation.z),t.scale.set(o.scale,o.scale,o.scale),e.includes("dis-ball")?t=applyWarmEmissiveMaterial(t):t.traverse((e=>{e.isMesh&&(e.material=fixMaterial(e.material),e.geometry&&(e.geometry=fixGeometry(e.geometry)))})),t.visible=o.visible,a.length>0){const o=new THREE.AnimationMixer(t);this.mixers[e]=o,a=this.fixAnimations(a,e);const n={};a.forEach(((e,t)=>{const a=e.name||`animation_${t}`,r=o.clipAction(e);r.loop=THREE.LoopOnce,r.clampWhenFinished=!0,r.paused=!0,r.play(),n[a]=r})),this.actions[e]=n,o.addEventListener("finished",(e=>{}))}return this.models[e]={object:t,options:o,animations:a},o.delay>0&&!o.visible&&this.showModel(e,o.delay),this.models[e]}catch(t){throw console.error(`Error loading model ${e}:`,t),t}},fixAnimations(e,t){return t.includes("ARMY AR")?e.map((e=>this.fixArmyAnimations(e))):e},fixArmyAnimations(e){const t=e.clone();for(let e=0;e<t.tracks.length;e++){t.tracks[e].name.includes("quaternion")}return t},updateAnimations(e){Object.keys(this.mixers).forEach((t=>{this.mixers[t].update(e)})),Object.keys(this.models).forEach((t=>{const o=this.models[t];o.object&&o.object.userData&&o.object.userData.update&&o.object.userData.update(e)}))},showModel(e,t=0){this.models[e]?!testMode&&mindarThree||setTimeout((()=>{this.models[e].object.visible=!0,this.actions[e]&&Object.keys(this.actions[e]).forEach((t=>{const o=this.actions[e][t];o.reset(),o.paused=!1,o.play()}))}),t):console.warn(`Cannot show model ${e}: not loaded`)},hideModel(e){this.models[e]?(this.models[e].object.visible=!1,this.actions[e]&&Object.keys(this.actions[e]).forEach((t=>{this.actions[e][t].paused=!0}))):console.warn(`Cannot hide model ${e}: not loaded`)},hideAllModels(){Object.keys(this.models).forEach((e=>{this.hideModel(e)}))},resetModels(){this.hideAllModels(),Object.keys(this.models).forEach((e=>{if(this.mixers[e]){this.mixers[e].stopAllAction();const t=this.models[e],o=new THREE.AnimationMixer(t.object);if(this.mixers[e]=o,t.animations&&t.animations.length>0){const a={};t.animations.forEach(((e,t)=>{const n=e.name||`animation_${t}`,r=o.clipAction(e);r.loop=THREE.LoopOnce,r.clampWhenFinished=!0,r.paused=!0,r.reset(),r.play(),a[n]=r})),this.actions[e]=a}}})),Object.keys(this.models).forEach((e=>{const{options:t}=this.models[e];this.showModel(e,t.delay)}))},startResetCycle(){this.cycleTimer&&clearInterval(this.cycleTimer),this.cycleTimer=setInterval((()=>{this.resetModels()}),this.cycleInterval)},stopResetCycle(){this.cycleTimer&&(clearInterval(this.cycleTimer),this.cycleTimer=null)},clearModels(){this.stopResetCycle(),Object.keys(this.mixers).forEach((e=>{delete this.mixers[e]})),this.actions={},this.models={}}},initTestScene=()=>{scene=new THREE.Scene,scene.background=null,camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0,logarithmicDepthBuffer:!0}),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(window.devicePixelRatio),renderer.outputColorSpace=THREE.SRGBColorSpace,renderer.setClearColor(0,0);const e=document.getElementById("ar-container");if(!e)return console.error("AR container element not found!"),null;e.appendChild(renderer.domElement);const t=new THREE.DirectionalLight(16777215,1);t.position.set(1,2,3),scene.add(t);const o=new THREE.AmbientLight(16777215,1);scene.add(o),camera.position.set(0,0,5);const a=()=>{requestAnimationFrame(a);const e=clock.getDelta();ModelManager.updateAnimations(e),renderer.render(scene,camera)};return a(),{scene:scene,camera:camera,renderer:renderer}},getModelConfigs=()=>[{id:"army",name:"Army AR",path:"models/army-ar.glb",position:{x:.5,y:-1,z:.2},scale:.3,delay:2e3,visible:!1,enabled:!0},{id:"civilian",name:"Civilian",path:"models/civilian.fbx",position:{x:0,y:-1,z:1},scale:.003,delay:100,visible:!1,enabled:!0},{id:"rsaf",name:"RSAF AR",path:"models/rsaf.fbx",position:{x:-.5,y:-1,z:.5},scale:.003,delay:3500,visible:!1,enabled:!0},{id:"dis",name:"DIS AR",path:"models/dis.glb",position:{x:-1,y:-1,z:0},scale:.3,delay:6500,visible:!1,enabled:!0},{id:"ball",name:"DIS Ball",path:"models/dis-ball.fbx",position:{x:-1,y:-.6,z:.5},scale:.0021,delay:11e3,visible:!1,enabled:!0},{id:"navy",name:"Navy AR",path:"models/navy.fbx",position:{x:1,y:-1,z:.3},scale:.003,delay:5e3,visible:!1,enabled:!0}];function createSpotlightCylinder(e,t=1){const o=new THREE.CylinderGeometry(2,.5,8,16),a=new THREE.MeshStandardMaterial({emissive:new THREE.Color(16759722),emissiveIntensity:1,transparent:!0,opacity:.2,side:THREE.DoubleSide,depthWrite:!1}),n=new THREE.Mesh(o,a);return n.position.set(e.x,e.y+3.2,e.z+.2),n.rotation.x=Math.PI,n.visible=!1,n}const loadTestModels=async()=>{try{const e=getModelConfigs(),t=[];for(const o of e)if(o.enabled)try{const e=await ModelManager.loadModel(o.path,{position:o.position,scale:o.scale,visible:o.visible,delay:o.delay});if(e){if(scene.add(e.object),o.path.includes("dis-ball"))continue;const a=createSpotlightCylinder(o.position,o.path.includes("glb")?1.5:.8);scene.add(a),t.push({spotlight:a,delay:o.delay+500,modelPath:o.path})}}catch(e){console.error(`Failed to load model ${o.path}:`,e),displayErrorMessage(`Failed to load ${o.path}`)}t.forEach((({spotlight:e,delay:t,modelPath:o})=>{setTimeout((()=>{e.visible=!0}),t)})),ModelManager.startResetCycle();const o=ModelManager.resetModels;ModelManager.resetModels=function(){o.call(this),t.forEach((({spotlight:e})=>{e.visible=!1})),t.forEach((({spotlight:e,delay:t,modelPath:o})=>{setTimeout((()=>{e.visible=!0}),t)}))}}catch(e){console.error("Error loading test models:",e)}},initializeAR=async()=>{try{try{if(!(await fetch("targets/targets.mind",{method:"HEAD"})).ok)throw console.error("Target file does not exist or is not accessible"),new Error("Target file missing")}catch(e){throw console.error("Error checking target file:",e),new Error("Cannot access target file")}mindarThree=new MindARThree({container:document.querySelector("#ar-container"),imageTargetSrc:"targets/targets.mind",uiScanning:!0,uiLoading:!1,rendererOptions:{antialias:!0,alpha:!0,logarithmicDepthBuffer:!0,outputColorSpace:THREE.SRGBColorSpace},filterMinCF:.001,filterBeta:.01,missTolerance:5,warmupTolerance:5});const{renderer:e,scene:t,camera:o}=mindarThree;e.setClearColor(0,0);const a=mindarThree.addAnchor(0);a.group.scale.set(1,1,1),a.group.position.set(0,0,0);const n=new THREE.DirectionalLight(16777215,1);n.position.set(1,2,3),t.add(n);const r=new THREE.AmbientLight(16777215,1);t.add(r);const i=getModelConfigs(),s=[],l=[];let d=!1;for(const e of i)if(e.enabled)try{const t=await ModelManager.loadModel(e.path,{position:e.position,scale:e.scale,visible:!1,delay:e.delay});if(t){if(a.group.add(t.object),e.path.includes("dis-ball"))continue;const o=createSpotlightCylinder(e.position,e.path.includes("glb")?1.5:.8);a.group.add(o),s.push({spotlight:o,delay:e.delay,modelPath:e.path})}}catch(t){console.error(`Failed to load model ${e.path}:`,t),displayErrorMessage(`Failed to load ${e.path}`)}const c=()=>{d||(d=!0,l.forEach((e=>{clearTimeout(e)})),l.length=0,Object.keys(ModelManager.models).forEach((e=>{const t=ModelManager.models[e];t&&t.object&&(t.object.visible=!1,ModelManager.actions[e]&&Object.keys(ModelManager.actions[e]).forEach((t=>{const o=ModelManager.actions[e][t];o.paused=!0,o.reset()})))})),s.forEach((({spotlight:e})=>{e.visible=!1})),Object.keys(ModelManager.models).forEach((e=>{const t=ModelManager.models[e];if(!t||!t.object)return;const o=setTimeout((()=>{d&&(t.object.visible=!0,ModelManager.actions[e]&&Object.keys(ModelManager.actions[e]).forEach((t=>{const o=ModelManager.actions[e][t];o.paused=!1,o.reset(),o.play()})))}),t.options.delay);l.push(o)})),s.forEach((({spotlight:e,delay:t,modelPath:o})=>{const a=setTimeout((()=>{d&&(e.visible=!0)}),t);l.push(a)})))},m=()=>{d&&(d=!1,l.forEach((e=>{clearTimeout(e)})),l.length=0,Object.keys(ModelManager.models).forEach((e=>{const t=ModelManager.models[e];t&&t.object&&(t.object.visible=!1,ModelManager.actions[e]&&Object.keys(ModelManager.actions[e]).forEach((t=>{const o=ModelManager.actions[e][t];o.paused=!0,o.reset()})))})),s.forEach((({spotlight:e,modelPath:t})=>{e.visible=!1})))};return a.onTargetFound=()=>{c()},a.onTargetLost=()=>{m()},e.setAnimationLoop((()=>{const a=clock.getDelta();ModelManager.updateAnimations(a),e.render(t,o)})),mindarThree.cleanup=()=>{m(),a.onTargetFound=null,a.onTargetLost=null},mindarThree}catch(e){throw console.error("Error initializing AR:",e),e}};function displayErrorMessage(e){const t=document.createElement("canvas");t.width=512,t.height=256;const o=t.getContext("2d");o.fillStyle="rgba(0, 0, 0, 0.8)",o.fillRect(0,0,t.width,t.height),o.font="24px Arial",o.fillStyle="white",o.textAlign="center",o.fillText("Error Loading Model:",t.width/2,100),o.fillText(e,t.width/2,140),o.fillText("Check console for details",t.width/2,180);const a=new THREE.CanvasTexture(t);a.colorSpace=THREE.SRGBColorSpace;const n=new THREE.PlaneGeometry(4,2),r=new THREE.MeshBasicMaterial({map:a,transparent:!0}),i=new THREE.Mesh(n,r);return scene.add(i),i}const startAR=async()=>{try{if(loadingElement&&(loadingElement.classList.remove("hidden"),document.querySelector(".loading-text").textContent="Loading..."),renderer&&(renderer.dispose(),document.getElementById("ar-container").innerHTML=""),ModelManager.clearModels(),testMode){const e=initTestScene();if(!e)throw new Error("Failed to initialize test scene");const{scene:t,camera:o,renderer:a}=e;scene=t,camera=o,renderer=a,renderer.setClearColor(0,0),await loadTestModels()}else try{try{(await navigator.mediaDevices.getUserMedia({video:!0})).getTracks().forEach((e=>e.stop()))}catch(e){throw console.error("Camera permission denied:",e),new Error("Camera permission denied. Please allow camera access to use AR mode.")}mindarThree=await initializeAR();try{await mindarThree.start()}catch(e){throw console.error("Error starting MindAR:",e),new Error("Failed to start camera. Please check camera permissions and try again.")}}catch(e){if(console.error("Error in AR mode:",e),loadingElement&&(document.querySelector(".loading-text").textContent=`Error: ${e.message||"Failed to initialize AR"}`),!confirm("AR mode failed. Would you like to try test mode instead?"))throw e;{testMode=!0;const e=initTestScene();if(!e)throw new Error("Failed to initialize fallback test scene");const{scene:t,camera:o,renderer:a}=e;scene=t,camera=o,renderer=a,await loadTestModels()}}loadingElement&&loadingElement.classList.add("hidden"),startButton&&(startButton.disabled=!0),stopButton&&(stopButton.disabled=!1)}catch(e){console.error("Error starting AR:",e),loadingElement&&loadingElement.classList.add("hidden"),alert(`Error starting experience: ${e.message||"Unknown error"}`),startButton&&(startButton.disabled=!1),stopButton&&(stopButton.disabled=!0)}};window.addEventListener("load",(()=>{Promise.all([fetch("models/",{method:"HEAD"}).catch((()=>({ok:!1,status:404}))),fetch("targets/",{method:"HEAD"}).catch((()=>({ok:!1,status:404}))),fetch("js/main.js",{method:"HEAD"}).catch((()=>({ok:!1,status:404})))])}));const stopAR=async()=>{try{if(mindarThree&&!testMode&&("function"==typeof mindarThree.cleanup&&mindarThree.cleanup(),await mindarThree.stop(),mindarThree=null),ModelManager.stopResetCycle(),ModelManager.clearModels(),renderer){renderer.dispose();const e=document.getElementById("ar-container");e&&(e.innerHTML=""),renderer=null}scene=null,camera=null,startButton&&(startButton.disabled=!1),stopButton&&(stopButton.disabled=!0)}catch(e){console.error("Error stopping AR:",e),alert(`Error stopping experience: ${e.message||"Unknown error"}`)}};function applyWarmEmissiveMaterial(e){const t=new THREE.MeshStandardMaterial({color:new THREE.Color(16777215),emissive:new THREE.Color(16737792),emissiveIntensity:3,roughness:.3,side:THREE.DoubleSide});return e.traverse((e=>{e.isMesh&&(e.userData.originalMaterial=e.material,e.material=t)})),e}window.addEventListener("resize",(()=>{testMode&&renderer&&(camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight))})),startButton?startButton.addEventListener("click",startAR):console.warn("Start button not found, cannot attach event listener"),stopButton?stopButton.addEventListener("click",stopAR):console.warn("Stop button not found, cannot attach event listener"),window.addEventListener("error",(e=>{console.error("Application error:",e),document.querySelector(".loading-text")&&(document.querySelector(".loading-text").textContent="Application error")}));